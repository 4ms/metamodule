ISRs: 0x3800'0000 == 0x0000'0000

text: C020'0000 + 16MB = C120'0000
ryml: 0xc0229168 to 0xc02453ec = 0x1C284 = 115'332
lvgl:0xc02453ec to 0xc0277364 = 0x31F78 = 204'664
text total: 0xc020'0000 to C0283528 = 0x82538 = 533'816

data:( RO Data: ) C120'0000 + 14M = C200'0000
C1200'0000 to ... = 0x357bd0 = 3'505'104 

All lvgl imgs


Does CoPro has to start at 0x1000'0000?

-------------------

MEMORY
{
	m_text 		 (RX)  	: ORIGIN = 0x10000000, LENGTH = 0x00050000 /*320kB for code*/
	m_text_ddr   (RX)  	: ORIGIN = 0xC0200000, LENGTH = 16M /*320kB for code*/
	m_data	     (RW)	: ORIGIN = ORIGIN(m_text_ddr) + LENGTH(m_text_ddr), LENGTH = 14M  /* END = 0xC200'0000 */
	...
}
SECTIONS
{
  .textddr :
  {
	*(.text.lv_*)
	*(.text.*c43yml*)
  } > m_text_ddr
...

LVGL and some RYML: total 244'944
0xC020'0000 to 0xC023'bcd0
LVGL:  to 0xC022'51b8 = 151'992
Ryml (c4): - to 0xC023'bcd0 = 92'952

Rest of code (.text):
0x1000'0000 to 0x100480b8 = 295'096
(393'216 available, 98'120 left)
(so to add LVGL 151'992 we'd need to free ~60k)

TODO: if UI is too slow, make room for LVGL in SRAM (speed boost for UI thread?)

try adding to ddr: 
.text.HAL_*
.text.USB_*
.text.USBH_*
.text.USBD_*
.text.MSC_*
.text.SCSI_*
.*???LFS??? LFS: 1001a6e4 to 10020b38 = 25'684

already in SRAM:
.text._lv_*
lv_*(.text*)

try adding more ryml to ddr:
.text._*fast_float*
.text.*yaml_raw_to_patch*
